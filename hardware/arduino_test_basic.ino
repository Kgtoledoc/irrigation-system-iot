/*
 * Prueba B√°sica - Sistema de Riego Arduino
 * 
 * Este sketch es para probar los componentes b√°sicos:
 * - Sensor de humedad del suelo
 * - Rel√© y bomba de agua
 * - LED de estado
 * - Bot√≥n manual
 * 
 * Conexiones:
 * - Sensor humedad: A0
 * - Rel√© bomba: D7
 * - LED estado: D13
 * - Bot√≥n manual: D2
 */

// Pines
#define SOIL_MOISTURE_PIN A0    // Sensor de humedad
#define PUMP_RELAY_PIN 7        // Rel√© para bomba
#define LED_STATUS_PIN 13       // LED de estado
#define BUTTON_PIN 2            // Bot√≥n manual

// Variables
int soilMoisture = 0;
bool isWatering = false;
bool buttonPressed = false;

void setup() {
  // Inicializar comunicaci√≥n serial
  Serial.begin(9600);
  Serial.println("üå± PRUEBA B√ÅSICA - Sistema de Riego Arduino");
  Serial.println("============================================");
  
  // Configurar pines
  pinMode(PUMP_RELAY_PIN, OUTPUT);
  pinMode(LED_STATUS_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  
  // Estado inicial
  digitalWrite(PUMP_RELAY_PIN, LOW);  // Bomba apagada
  digitalWrite(LED_STATUS_PIN, LOW);  // LED apagado
  
  Serial.println("‚úÖ Sistema inicializado");
  Serial.println("üìã Comandos disponibles:");
  Serial.println("  - 'READ' - Leer sensor de humedad");
  Serial.println("  - 'PUMP_ON' - Encender bomba");
  Serial.println("  - 'PUMP_OFF' - Apagar bomba");
  Serial.println("  - 'TEST' - Prueba autom√°tica");
  Serial.println("  - 'CALIBRATE' - Calibrar sensor");
  Serial.println();
}

void loop() {
  // Leer bot√≥n manual
  checkButton();
  
  // Leer comandos seriales
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    processCommand(command);
  }
  
  // Actualizar LED de estado
  digitalWrite(LED_STATUS_PIN, isWatering);
  
  delay(100);  // Peque√±a pausa
}

void checkButton() {
  static bool lastButtonState = HIGH;
  static unsigned long lastDebounceTime = 0;
  unsigned long debounceDelay = 50;
  
  bool reading = digitalRead(BUTTON_PIN);
  
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }
  
  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && lastButtonState == HIGH) {
      // Bot√≥n presionado
      Serial.println("üîò Bot√≥n manual presionado");
      if (!isWatering) {
        startWatering();
      } else {
        stopWatering();
      }
    }
  }
  
  lastButtonState = reading;
}

void processCommand(String command) {
  command.toUpperCase();
  
  if (command == "READ") {
    readSoilMoisture();
  }
  else if (command == "PUMP_ON") {
    startWatering();
  }
  else if (command == "PUMP_OFF") {
    stopWatering();
  }
  else if (command == "TEST") {
    runTest();
  }
  else if (command == "CALIBRATE") {
    calibrateSensor();
  }
  else if (command == "STATUS") {
    showStatus();
  }
  else {
    Serial.println("‚ùå Comando no reconocido: " + command);
    Serial.println("üìã Comandos v√°lidos: READ, PUMP_ON, PUMP_OFF, TEST, CALIBRATE, STATUS");
  }
}

void readSoilMoisture() {
  int rawValue = analogRead(SOIL_MOISTURE_PIN);
  soilMoisture = map(rawValue, 1023, 0, 0, 100);  // Invertir valores
  
  Serial.print("üå± Humedad del suelo: ");
  Serial.print(soilMoisture);
  Serial.print("% (Raw: ");
  Serial.print(rawValue);
  Serial.println(")");
  
  // Interpretaci√≥n b√°sica
  if (soilMoisture < 30) {
    Serial.println("üíß Suelo muy seco - necesita riego");
  } else if (soilMoisture < 60) {
    Serial.println("üå± Suelo moderadamente seco");
  } else if (soilMoisture < 80) {
    Serial.println("‚úÖ Suelo h√∫medo - bien");
  } else {
    Serial.println("üí¶ Suelo muy h√∫medo - no necesita riego");
  }
}

void startWatering() {
  if (!isWatering) {
    isWatering = true;
    digitalWrite(PUMP_RELAY_PIN, HIGH);
    Serial.println("üíß Riego INICIADO");
  } else {
    Serial.println("‚ö†Ô∏è El riego ya est√° activo");
  }
}

void stopWatering() {
  if (isWatering) {
    isWatering = false;
    digitalWrite(PUMP_RELAY_PIN, LOW);
    Serial.println("üíß Riego DETENIDO");
  } else {
    Serial.println("‚ö†Ô∏è El riego no est√° activo");
  }
}

void runTest() {
  Serial.println("üß™ INICIANDO PRUEBA AUTOM√ÅTICA");
  Serial.println("================================");
  
  // 1. Leer sensor
  Serial.println("1Ô∏è‚É£ Leyendo sensor de humedad...");
  readSoilMoisture();
  delay(1000);
  
  // 2. Probar LED
  Serial.println("2Ô∏è‚É£ Probando LED de estado...");
  for (int i = 0; i < 5; i++) {
    digitalWrite(LED_STATUS_PIN, HIGH);
    delay(200);
    digitalWrite(LED_STATUS_PIN, LOW);
    delay(200);
  }
  Serial.println("‚úÖ LED probado");
  
  // 3. Probar bomba (corto tiempo)
  Serial.println("3Ô∏è‚É£ Probando bomba (3 segundos)...");
  startWatering();
  delay(3000);
  stopWatering();
  
  // 4. Estado final
  Serial.println("4Ô∏è‚É£ Estado final:");
  showStatus();
  
  Serial.println("‚úÖ PRUEBA COMPLETADA");
}

void calibrateSensor() {
  Serial.println("üîß CALIBRACI√ìN DEL SENSOR");
  Serial.println("==========================");
  Serial.println("Coloca el sensor en diferentes condiciones:");
  Serial.println();
  
  Serial.println("1Ô∏è‚É£ Sensor en el aire (seco):");
  Serial.println("   Coloca el sensor en el aire y presiona cualquier tecla...");
  while (!Serial.available()) {
    delay(100);
  }
  Serial.read();  // Limpiar buffer
  int dryValue = analogRead(SOIL_MOISTURE_PIN);
  Serial.print("   Valor en seco: ");
  Serial.println(dryValue);
  
  Serial.println();
  Serial.println("2Ô∏è‚É£ Sensor en agua (h√∫medo):");
  Serial.println("   Coloca el sensor en agua y presiona cualquier tecla...");
  while (!Serial.available()) {
    delay(100);
  }
  Serial.read();  // Limpiar buffer
  int wetValue = analogRead(SOIL_MOISTURE_PIN);
  Serial.print("   Valor en h√∫medo: ");
  Serial.println(wetValue);
  
  Serial.println();
  Serial.println("üìä RESULTADOS DE CALIBRACI√ìN:");
  Serial.print("   Seco (0%): ");
  Serial.println(dryValue);
  Serial.print("   H√∫medo (100%): ");
  Serial.println(wetValue);
  Serial.println();
  Serial.println("üí° Para usar estos valores, modifica la funci√≥n map() en el c√≥digo:");
  Serial.print("   soilMoisture = map(rawValue, ");
  Serial.print(dryValue);
  Serial.print(", ");
  Serial.print(wetValue);
  Serial.println(", 0, 100);");
}

void showStatus() {
  Serial.println("üìä ESTADO DEL SISTEMA");
  Serial.println("=====================");
  Serial.print("üíß Riego: ");
  Serial.println(isWatering ? "ACTIVO" : "INACTIVO");
  Serial.print("üå± Humedad: ");
  Serial.print(soilMoisture);
  Serial.println("%");
  Serial.print("üîò Bot√≥n: ");
  Serial.println(digitalRead(BUTTON_PIN) == HIGH ? "NO PRESIONADO" : "PRESIONADO");
  Serial.print("üí° LED: ");
  Serial.println(isWatering ? "ENCENDIDO" : "APAGADO");
  Serial.println();
} 